{"version":3,"sources":["spa-public-validator.js"],"names":["factory","window","exports","getType","obj","Object","prototype","toString","call","isArray","TYPE_ARRAY","isFunction","TYPE_FUNCTION","Validator","validations","this","cs","vs","i","len","length","fields","field","$field","j","push","$form","querySelectorAll","rules","isEmpty","value","TYPE_UNDEFINED","equal","values","empty","pass","long","min","max","range","leftEqual","rightEqual","registDefaultCheckers","name","matcher","callback","TYPE_REGEXP","test","TypeError","defaultCheckers","is","not","apply","arguments","getChecker","type","parts","split","replace","checker","apiCheckers","params","_params","slice","utils","getLengthParams","getRangeParams","hasOwn","p","hasOwnProperty","TYPE_STRING","trim","str","getValue","htmlElement","getAttribute","paramString","errorString","result","match","Infinity","vprtt","add","setRule","rule","check","remove","removeRule","defaultMatchers","url","email","number","int","positive","negative","varName","nickName","QQ","upperCase","lowerCase","ruleName","m","api","registApiChecker","_checker","FormValidator","formOrSelector","document","$fields","$fs","rs","constructor","ruleType","k","unshift","context","fail"],"mappings":"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","file":"spa-public-validator.min.js","sourcesContent":["(function(factory) {\r\n    factory(window);\r\n}(function(exports) {\r\n\n// 为了兼容不支持querySelectorAll的浏览器，同时又不需要使用jQuery，使用原生API获取元素\r\n// 只是为了获取特定元素，所以只支持简单的选择器\r\n// 1. id选择器\r\n// 2. 类选择器\r\n// 3. 标签选择器\r\n// 4. 属性选择器\r\n\r\n/**\r\n * query selector\r\n * 这个函数是不完整的！不公开使用\r\n * @param {String} selector\r\n * @return {Array} element list\r\n */\r\nvar query = function(selector) {\r\n  \r\n};\r\n\n// shortcut\r\nvar hasOwn = function(p) {\r\n  return this.hasOwnProperty(p);\r\n};\r\n\r\n// Object Type Const String\r\nvar TYPE_STRING = '[object String]'\r\n  , TYPE_ARRAY = '[object Array]'\r\n  , TYPE_FUNCTION = '[object Function]'\r\n  , TYPE_REGEXP = '[object RegExp]'\r\n  , TYPE_UNDEFINED = 'undefined';\r\n\r\nvar utils = {};\r\n\r\n/**\r\n * Utils: Get Object Type\r\n * @param {Object} obj\r\n * @return {String} object type\r\n */\r\nfunction getType(obj) {\r\n  return Object.prototype.toString.call(obj);\r\n};\r\n\r\n// HACK: 验证的时候，不作trim处理\r\nutils.trim = function(str) {\r\n  return str.replace(/^\\s+|\\s$/g, '');\r\n};\r\n\r\n/**\r\n * Utils: isArray\r\n * @param {Object} obj\r\n * @return {Boolean} is Array or not\r\n */\r\nfunction isArray(obj) {\r\n  return getType(obj) === TYPE_ARRAY;\r\n};\r\n\r\n/**\r\n * Utils: isFunction\r\n * @param {Object} obj\r\n * @return {Boolean} is Function or not\r\n */\r\nfunction isFunction(obj) {\r\n  return getType(obj) === TYPE_FUNCTION;\r\n};\r\n\r\n/**\r\n * Utils: getValue\r\n * @param {HTMLElement} htmlElement\r\n * @return {String} value of htmlElement\r\n */\r\nutils.getValue = function(htmlElement) {\r\n  return htmlElement.value || htmlElement.getAttribute('data-value') || '';\r\n};\r\n\r\n/**\r\n * 解析length规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n */\r\nutils.getLengthParams = function(paramString) {\r\n  var errorString = 'The parameters for length is illegal.';\r\n  paramString = paramString[0]; // HACK: 假设只有一个参数\r\n  var matcher = /\\s*([\\(\\[])\\s*(\\d+)?\\s*,\\s*(\\d+)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为0；如果没有最大限制，最大限制为Infinite\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[3];\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = 0;\r\n  } else if (result[1] === '(') {\r\n    min = +min+1;\r\n  } else if (result[1] === '[') {\r\n    min = +min;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else if (result[4] === ')') {\r\n    max = +max-1;\r\n  } else if (result[4] === ']'){\r\n    max = +max;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (min !== min || max !== max) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  return [min, max];\r\n};\r\n\r\n/**\r\n * 解析range规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n * @throws {TypeError} 'The parameters for range is illegal.'\r\n * TODO: 类似length规则\r\n */\r\nutils.getRangeParams = function(paramString) {\r\n  var errorString = 'The parameters for range is illegal.';\r\n  paramString = paramString[0];\r\n  var matcher = /\\s*([\\(\\[])\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*,\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为负无穷；如果没有最大限制，最大限制为正无穷\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[6], leftEqual, rightEqual;\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = -Infinity;\r\n  } else {\r\n    min = +min;\r\n  }\r\n  leftEqual = result[1] === '[';\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else {\r\n    max = +max;\r\n  }\r\n  rightEqual = result[10] === ']';\r\n  return [leftEqual, min, max, rightEqual];\r\n};\r\n\n/**\r\n * @constructor\r\n * @class Validator\r\n * @param {Array|Object} validations\r\n */\r\nfunction Validator(validations) {\r\n  this.cs = {};\r\n\r\n  validations = validations || [];\r\n\r\n  this.vs = [];\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $field = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      $field.push(this.$form.querySelectorAll('[name=' + fields[j] + ']')[0]);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    this.vs.push({\r\n      $field: $field,\r\n      rules: rules\r\n    });\r\n  }\r\n};\r\n\r\nvar vprtt = Validator.prototype;\r\n\r\n/**\r\n * @method .add(rules)\r\n * 添加自定义规则\r\n * @param {Object} rules\r\n * @return this\r\n */\r\nvprtt.add = function(rules) {\r\n  function setRule(rule) {\r\n    switch (getType(rule.rule)) {\r\n      case TYPE_FUNCTION:\r\n        this.cs[rule.name] = rule.rule;\r\n        break;\r\n      case TYPE_STRING:\r\n        this.cs[rule.name] = function() {\r\n        };\r\n        break;\r\n      case TYPE_REGEXP:\r\n        this.cs[rule.name] = function(values) {\r\n          var pass = true;\r\n          if (isArray(values)) {\r\n            for (var i = 0, len = values.length; i < len; ++i) {\r\n              if (!rule.rule.test(values[i])) {\r\n                pass = false;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            if (!rule.rule.test(values)) {\r\n              pass = false;\r\n            }\r\n          }\r\n          return pass;\r\n        };\r\n        break;\r\n      default:\r\n        throw new TypeError('Rule type not support.');\r\n    }\r\n  }\r\n  if (isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      setRule.call(this, rules[i]);\r\n    }\r\n  } else {\r\n    setRule.call(this, rules);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @return {Boolean} pass or not\r\n */\r\nvprtt.check = function() {\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .remove(rules)\r\n * 移除自定义规则\r\n * @param {Array|String} rules\r\n * @return this\r\n */\r\nvprtt.remove = function(rules) {\r\n  function removeRule(rule) {\r\n    if (typeof this.cs[rule] !== TYPE_UNDEFINED) {\r\n      delete this.cs[rule];\r\n    }\r\n  }\r\n  if (isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      removeRule(rules[i]);\r\n    }\r\n  } else {\r\n    removeRule(rules);\r\n  }\r\n  return this;\r\n};\r\n\n// checker函数的第一个参数总是一个数组，这个数组就是待检测的字符串数组\r\n// 从第二个参数起，每个checker函数带有不同长度的参数列表。例如，empty函数的参数列表长度为0，long函数的参数列表长度为2（暂时，有待改进）\r\nvar defaultCheckers = {};\r\n\r\nvar defaultMatchers = {\r\n  ////////// 正则匹配\r\n  url: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/\r\n  , email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i\r\n  , number: /^(0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?$/\r\n  , int: /^(0|([\\+\\-]?[1-9]\\d*))$/\r\n  // 正整数\r\n  , positive: /^\\+?[1-9]\\d*$/\r\n  // 负整数\r\n  , negative: /^\\-[1-9]\\d*$/\r\n  // 变量名：只能包含英文字母/数字/下划线，且不能以数字开头\r\n  , varName: /^[a-zA-Z_][a-zA-Z0-9_]*$/\r\n  // 昵称：只能包含中文/英文字母/数字/下划线，且不能以数字开头\r\n  , nickName: /^[\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z_][\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z0-9_]*$/\r\n  // QQ\r\n  , QQ: /^[1-9][0-9]{4,}$/\r\n  // 身份证号\r\n  // 手机号\r\n  // 电话号码\r\n  // 邮政编码\r\n  // IP\r\n  // IPV4\r\n  // IPV6\r\n  // 全大写\r\n  , upperCase: /^[A-Z]+$/g\r\n  // 全小写\r\n  , lowerCase: /^[a-z]$/g\r\n  ////////// 非正则匹配\r\n  // 空限制\r\n  , empty: empty\r\n  // 相等\r\n  , equal: equal\r\n  // 长度范围限制\r\n  , long: long\r\n  // 数值大小限制\r\n  , range: range\r\n};\r\n\r\n/**\r\n * 判断值是否为空\r\n * @param {Object} value\r\n * 如果value为null|undefined|空字符串，就判断为真，否则判断为假\r\n * @return {Boolean} 是否为空\r\n */\r\nfunction isEmpty(value) {\r\n  return value === null || typeof value === TYPE_UNDEFINED || value === '';\r\n}\r\n\r\n/**\r\n * defaults.checkers: equal check\r\n * @param {Array} values\r\n * @return {Boolean} equal or not\r\n */\r\nfunction equal(values) {\r\n  var equal = true;\r\n  for (var i = 0; i < values.length - 1; ++i) {\r\n    if (values[i] !== values[i+1]) {\r\n      equal = false;\r\n      break;\r\n    }\r\n  }\r\n  return equal;\r\n}\r\n\r\n/**\r\n * defaults.checkers: empty check\r\n * @param {Array} values\r\n * @return {Boolean} yes or no\r\n */\r\nfunction empty(values) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    if (!isEmpty(values[i])) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n};\r\n\r\n/**\r\n * defaults.checkers: length check\r\n * @param {Array} values\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @return {Boolean} yes or no\r\n */\r\nfunction long(values, min, max) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var length = values[i].length;\r\n    if (length < min || length > max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n};\r\n\r\n/**\r\n * defaults.check: number range check\r\n * 这个函数和long类似，但是不是用来限制长度的，而是用来限制数值本身的\r\n * @param {Array} values\r\n * @param {Boolean} leftEqual 是否大于等于\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @param {Boolean} rightEqual 是否小于等于\r\n * @return {Boolean} yes or no\r\n */\r\nfunction range(values, leftEqual, min, max, rightEqual) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var value = values[i];\r\n    if (leftEqual && value < min || rightEqual && value > max || !leftEqual && value <= min || !rightEqual && value >= max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n};\r\n\nvar apiCheckers = {};\r\n\r\n/**\r\n * @static Validator.is\r\n * 优先级： api.checkers > defaults.checkers\r\n * @param {String} ruleName\r\n * @param {String} value\r\n * @return {Boolean} is or not\r\n */\r\nvar is = Validator.is = function(ruleName, value) {\r\n  var checker = apiCheckers[ruleName] || defaultCheckers[ruleName];\r\n  if (!isFunction(checker)) {\r\n    throw new TypeError('Checker for ' + ruleName + ' is not defined.');\r\n  }\r\n  return checker(value);\r\n};\r\n\r\n/**\r\n * @static Validator.not\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar not = Validator.not = function(ruleName, value) {\r\n  var checker = apiCheckers[ruleName] || defaultCheckers[ruleName];\r\n  if (!isFunction(checker)) {\r\n    throw new TypeError('Checker for ' + ruleName + ' is not defined.');\r\n  }\r\n  return function(value) {\r\n    return !checker(value);\r\n  };\r\n};\r\n\r\n/**\r\n * This helper helps to regist default checkers, `is` api and `not` api\r\n * @param {String} name\r\n * @param {Object} matcher\r\n */\r\nfunction registDefaultCheckers(name, matcher) {\r\n  var callback;\r\n  switch(getType(matcher)) {\r\n    case TYPE_REGEXP:\r\n      callback = function(value) {\r\n        return matcher.test(value);\r\n      };\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      callback = matcher;\r\n      break;\r\n    default:\r\n      throw new TypeError('Matcher Type Error.');\r\n  }\r\n  defaultCheckers[name] = callback;\r\n  is[name] = callback;\r\n  not[name] = function() {\r\n    return callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nfor (var m in defaultMatchers) {\r\n  if (hasOwn.call(defaultMatchers, m)) {\r\n    registDefaultCheckers(m, defaultMatchers[m]);\r\n  }\r\n}\r\n\r\n/**\r\n * @static Validator.api(type, apiName, checker)\r\n * TODO: 修改参数列表，只接收一个参数\r\n * @param {Array|Object} rules\r\n * @return Validator\r\n */\r\nValidator.api = function(rules) {\r\n\r\n  /**\r\n   * @param {String} type\r\n   * @param {String|RegExp|Function} checker\r\n   * checker可以是字符串，正则表达式，或者函数\r\n   * 当checker是字符串时，表示基于内建的规则添加的新规则（其实完全可以用内建规则实现）\r\n   * 当checker是正则表达式时，表示一条通过该正则表达式测试的规则\r\n   * 当checker是函数时，该函数的返回值必须是布尔\r\n   * This function may throw a `TypeError` if checker's type is not support.\r\n   */\r\n  function registApiChecker(type, checker) {\r\n    var callback;\r\n    switch(getType(checker)) {\r\n      case TYPE_STRING:\r\n        var parts = checker.split(':');\r\n        var _checker = defaultCheckers[parts[0]];\r\n        if (typeof _checker === TYPE_UNDEFINED) {\r\n          throw new TypeError('Checker ' + parts[0] + ' is not defined.');\r\n        }\r\n        callback = function(value) {\r\n          return _checker.call(this, parts.slice(1));\r\n        };\r\n        break;\r\n      case TYPE_REGEXP:\r\n        callback = function(value) {\r\n          return checker.test(value);\r\n        }\r\n        break;\r\n      case TYPE_FUNCTION:\r\n        callback = checker;\r\n        break;\r\n      default:\r\n        throw new TypeError('Checker must be a String/RegExp/Function.');\r\n    }\r\n    apiCheckers[type] = callback;\r\n  }\r\n\r\n  if (isArray(rules)) {\r\n    for (var i = 0; i < rules.length; ++i) {\r\n      registApiChecker(rules[i]);\r\n    }\r\n  } else {\r\n    registApiChecker(rules);\r\n  }\r\n\r\n  return Validator;\r\n};\r\n\n/**\r\n * @static Validator.extends()\r\n */\r\n// Validator.extend = function(constructorFunction) {\r\n//\r\n//   constructorFunction.prototype = new Validator();\r\n//   constructorFunction.prototype.constructor = constructorFunction;\r\n//\r\n//   return constructorFunction;\r\n//\r\n// };\r\n\n/**\r\n * @constructor\r\n * @class FormValidator\r\n * @extends Validator\r\n * @param {HTMLElement|String} formOrSelector\r\n * @param {Object|Array} validations\r\n */\r\nvar FormValidator = function(formOrSelector, validations) {\r\n  this.vs = []; // 必须！\r\n  if (typeof formOrSelector === 'string') {\r\n    this.$form = document.querySelectorAll(formOrSelector)[0]; // TODO: querySelectorAll兼容性\r\n  } else {\r\n    this.$form = formOrSelector;\r\n  }\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $fields = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      var $field = this.$form.querySelectorAll('[name=' + fields[j] + ']')[0] || this.$form.querySelectorAll('[data-name=' + fields[j] + ']')[0]; // TODO: querySelectorAll兼容性\r\n      if (typeof $field === TYPE_UNDEFINED) {\r\n        throw new TypeError('未找到域：' + fields[j]);\r\n      }\r\n      $fields.push($field);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    this.vs.push({\r\n      $fs: $fields,\r\n      rs: rules\r\n    });\r\n  }\r\n};\r\n\r\nFormValidator.prototype = new Validator();\r\nFormValidator.prototype.constructor = FormValidator;\r\n\r\n/**\r\n * getChecker\r\n * 优先级：this.checkers > api.checkers > defaults.checkers\r\n * @param {String} type\r\n * @return {Array} [checkerFunction, params]\r\n */\r\nfunction getChecker(type) {\r\n  var parts = type.split(':');\r\n  type = parts[0].replace(/length/i, 'long');\r\n  var checker = this.cs[type] || apiCheckers[type] || defaultCheckers[type];\r\n  if (!isFunction(checker)) {\r\n    throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  }\r\n  var params;\r\n  var _params = parts.slice(1);\r\n  switch (type) {\r\n    case 'long':\r\n      params = utils.getLengthParams(_params);\r\n      break;\r\n    case 'range':\r\n      params = utils.getRangeParams(_params);\r\n      break;\r\n    default:\r\n      params = _params;\r\n  }\r\n  return [checker, params];\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @override Validator.prototype.check()\r\n * @return {Boolean} pass or not\r\n * TODO: 增加对`&&`,`||`的支持\r\n */\r\nFormValidator.prototype.check = function() {\r\n  var $form = this.$form;\r\n  var validations = this.vs;\r\n  var pass = true;\r\n  for (var i = 0; i < validations.length; ++i) {\r\n    var $fields = validations[i].$fs;\r\n    var rules = validations[i].rs;\r\n    for (var j = 0; j < rules.length; ++j) {\r\n      var rule = rules[j];\r\n      var not = rule.type[0] === '!';\r\n      var ruleType = not ? rule.type.slice(1) : rule.type;\r\n      var checker = getChecker.call(this, ruleType);\r\n      var values  = [];\r\n      for (var k = 0; k < $fields.length; ++k) {\r\n        values.push(utils.getValue($fields[k]));\r\n      }\r\n      checker[1].unshift(values);\r\n      var result = checker[0].apply(null, checker[1]);\r\n      if (not && result || !not && !result) {\r\n        var context = $fields.length < 2 ? $fields[0] : $fields;\r\n        rule.fail.call(context, $form);\r\n        pass = false;\r\n        break; // HACK: 也许应该支持不跳出：这样就是每次都检查所有的域的所有规则\r\n      }\r\n    }\r\n    if (!pass) break;\r\n  }\r\n  return pass;\r\n};\r\n\n\r\nexports.Validator = Validator;\r\n\r\nexports.FormValidator = FormValidator;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}