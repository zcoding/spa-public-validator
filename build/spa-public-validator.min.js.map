{"version":3,"sources":["spa-public-validator.js"],"names":["factory","define","cmd","require","exports","module","window","isEmpty","value","registAPI","name","callback","is","console","warn","not","objectType","Object","prototype","toString","utils","isArray","obj","type","TYPE_ARRAY","isFunction","TYPE_FUNCTION","getValue","htmlElement","getAttribute","getChecker","parts","split","replace","checker","defaults","checkers","TypeError","params","_params","slice","getLengthParams","paramString","matcher","result","match","min","max","Infinite","call","TYPE_STRING","TYPE_REGEXP","Validator","vprtt","add","rules","this","createFormValidator","formOrSelector","validations","FormValidator","$form","document","querySelectorAll","i","len","length","fields","field","$field","j","push","constructor","check","pass","rule","values","k","unshift","apply","context","fail","notEmpty","ruleName","testString","lenght","api","apiName","_type","test","_checker","list"],"mappings":"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","file":"spa-public-validator.min.js","sourcesContent":["(function(factory) {\r\n  if (typeof define === 'function' && define.cmd) {\r\n    define(function(require, exports, module) {\r\n      factory(exports);\r\n    });\r\n  } else {\r\n    factory(window)\r\n  }\r\n}(function(exports) {\r\n\nvar objectType = Object.prototype.toString;\r\n\r\nvar hasOwn = function(p) {\r\n  return this.hasOwnProperty(p);\r\n};\r\n\r\nvar utils = {};\r\n\r\nutils.isArray = function(obj) {\r\n  return utils.type(obj) === utils.TYPE_ARRAY;\r\n};\r\n\r\nutils.isFunction = function(obj) {\r\n  return utils.type(obj) === utils.TYPE_FUNCTION;\r\n};\r\n\r\nutils.getValue = function(htmlElement) {\r\n  if (typeof htmlElement.value === 'undefined') {\r\n    return htmlElement.getAttribute('data-value') || '';\r\n  } else {\r\n    return htmlElement.value;\r\n  }\r\n};\r\n\r\n/**\r\n * getChecker\r\n * @param {String} type\r\n * @return {Array} [checkerFunction, params]\r\n */\r\nutils.getChecker = function(type) {\r\n  var parts = type.split(':');\r\n  type = parts[0].replace(/length/i, 'long');\r\n  var checker = defaults.checkers[type];\r\n  if (!utils.isFunction(checker)) {\r\n    throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  }\r\n  // TODO: 直接把parts作为参数传进去是不行的，参数还没有解析完成，例如length的参数\"(5,12]\"要解析成参数列表[6, 12]\r\n  var params;\r\n  var _params = parts.slice(1);\r\n  switch (type) {\r\n    case 'long':\r\n      params = utils.getLengthParams(_params);\r\n      break;\r\n    default:\r\n      params = _params;\r\n  }\r\n  return [checker, params];\r\n};\r\n\r\n/**\r\n * 解析length规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n * HACK: 这里的解析可以更复杂，例如，加入对布尔运算的解析\r\n */\r\nutils.getLengthParams = function(paramString) {\r\n  paramString = paramString[0]; // 暂时只做最简单的解析\r\n  var matcher = /\\s*([\\(\\[])\\s*(\\d+)?\\s*,\\s*(\\d+)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为0；如果没有最大限制，最大限制为Infinite\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  var min = result[2], max = result[3];\r\n  if (typeof min === 'undefined') {\r\n    min = 0;\r\n  } else if (result[1] === '(') {\r\n    min = +min+1;\r\n  } else if (result[1] === '[') {\r\n    min = +min;\r\n  } else {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  if (typeof max === 'undefined') {\r\n    max = Infinite;\r\n  } else if (result[4] === ')') {\r\n    max = +max-1;\r\n  } else if (result[4] === ']'){\r\n    max = +max;\r\n  } else {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  if (min !== min || max !== max) {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  return [min, max];\r\n};\r\n\r\n/**\r\n * Utils: Get Object Type\r\n * @param {Object} obj\r\n * @return {String} object type\r\n */\r\nutils.type = function(obj) {\r\n  return objectType.call(obj);\r\n};\r\n\r\n// Object Type Const String\r\nutils.TYPE_STRING = '[object String]';\r\nutils.TYPE_ARRAY = '[object Array]';\r\nutils.TYPE_FUNCTION = '[object Function]';\r\nutils.TYPE_REGEXP = '[object RegExp]';\r\n\n/**\r\n * @constructor\r\n * @class Validator\r\n */\r\nvar Validator = function() {};\r\n\r\nvar vprtt = Validator.prototype;\r\n\r\n/**\r\n * @method .add()\r\n * @param {Object} rules\r\n * @return this\r\n */\r\nvprtt.add = function(rules) {\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .createFormValidator()\r\n * @param {Element|String} form|selector\r\n * @param {Object} validations\r\n */\r\nvprtt.createFormValidator = function(formOrSelector, validations) {\r\n  return new FormValidator(formOrSelector, validations);\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @class FormValidator\r\n * @extends Validator\r\n * @param {HTMLElement|String} formOrSelector\r\n * @param {Object|Array} validations\r\n */\r\nvar FormValidator = function(formOrSelector, validations) {\r\n  if (typeof formOrSelector === 'string') {\r\n    this.$form = document.querySelectorAll(formOrSelector)[0];\r\n  } else {\r\n    this.$form = formOrSelector;\r\n  }\r\n  this.validations = [];\r\n  if (!utils.isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!utils.isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $field = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      $field.push(this.$form.querySelectorAll('[name=' + fields[j] + ']')[0]);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = utils.isArray(rules) ? rules : [rules];\r\n    this.validations.push({\r\n      $field: $field,\r\n      rules: rules\r\n    });\r\n  }\r\n}\r\n\r\nFormValidator.prototype = new Validator();\r\nFormValidator.prototype.constructor = FormValidator;\r\n\r\n/**\r\n * @method .check()\r\n * @return {Boolean} pass or not\r\n */\r\nFormValidator.prototype.check = function() {\r\n  var $form = this.$form;\r\n  var validations = this.validations;\r\n  var pass = true;\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var $field = validations[i].$field;\r\n    var rules = validations[i].rules;\r\n    for (var j = 0; j < rules.length; ++j) {\r\n      var rule = rules[j];\r\n      var checker = utils.getChecker(rule.type);\r\n      var values  = [];\r\n      for (var k = 0; k < $field.length; ++k) {\r\n        values.push(utils.getValue($field[k]));\r\n      }\r\n      checker[1].unshift(values);\r\n      if (!checker[0].apply(null, checker[1])) {\r\n        var context = $field.length < 2 ? $field[0] : $field;\r\n        rule.fail.call(context, $form);\r\n        pass = false;\r\n        break;\r\n      }\r\n    }\r\n    if (!pass) break;\r\n  }\r\n  return pass;\r\n};\r\n\nvar rules = ['empty', 'length', 'email', 'url', 'yes']; // 内置规则\n\nvar matchers = {\n  ////////// 正则匹配\n  url: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/,\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n  ////////// 非正则匹配\n  empty: isEmpty\n};\n\n/**\n * 判断值是否为空\n * @param {Object} value\n * 如果value为null|undefined|空字符串，就判断为真，否则判断为假\n * @return {Boolean} 是否为空\n */\nfunction isEmpty(value) {\n  return value === null || typeof value === 'undefined' || value === '';\n}\n\nvar defaults = {};\n\n// TODO: checker函数总是接收（唯一）一个字符串数组作为参数\nvar checkers = {};\n\n/**\n * checker: not empty\n * @param {Array} values\n * @return {Boolean} yes or no\n */\ncheckers.notEmpty = function(values) {\n  var pass = true;\n  for (var i = 0, len = values.length; i < len; ++i) {\n    if (isEmpty(values[i])) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n};\n\n/**\n * checker: length limit\n * @param {Array} values\n * @param {Number} min\n * @param {Number} max\n * @return {Boolean} yes or no\n */\ncheckers.long = function(values, min, max) {\n  var pass = true;\n  for (var i = 0, len = values.length; i < len; ++i) {\n    var length = values[i].length;\n    if (length < min || length > max) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n};\n\ndefaults.checkers = checkers;\n\n/**\r\n * @static Validator.is\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar is = function(ruleName, testString) {\r\n  return is[ruleName](testString);\r\n};\r\n\r\n/**\r\n * @static Validator.not\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar not = function(ruleName, testString) {\r\n  return not[ruleName](testString);\r\n};\r\n\r\nValidator.is = is;\r\n\r\nValidator.not = not;\r\n\r\n/**\r\n * This helper helps to regist api\r\n * @param {String} name\r\n * @param {Function} callback\r\n */\r\nfunction registAPI(name, callback) {\r\n  if (typeof is[name] !== 'undefined') {\r\n    console.warn('Warning: current api \"' + name + '\" will be overwritten.');\r\n  }\r\n  is[name] = callback;\r\n  not[name] = function(value) {\r\n    return !is[name](value);\r\n  };\r\n}\r\n\r\nValidator.not = not;\r\n\r\n// 注册内建规则\r\nfor (var i = 0, len = rules.lenght; i < len; ++i) {\r\n  registAPI(rules[i], defaults.checkers[rules[i]]);\r\n}\r\n\r\n/**\r\n * @static Validator.api(type, apiName, checker)\r\n * @param {String} type\r\n * @param {String} apiName\r\n * @param {String|RegExp|Function} checker\r\n * checker可以是字符串，正则表达式，或者函数\r\n * 当checker是字符串时，表示基于内建的规则添加的新规则（其实完全可以用内建规则实现）\r\n * 当checker是正则表达式时，表示一条通过该正则表达式测试的规则\r\n * 当checker是函数时，该函数的返回值必须是布尔\r\n * This function may throw a `TypeError` if checker's type is not support.\r\n * @return Validator\r\n */\r\nValidator.api = function(type, apiName, checker) {\r\n  var _type = utils.type(checker);\r\n  if (!/is|not/.test(type)) {\r\n    throw new TypeError('The api type \"' + type + '\" is not support.');\r\n  }\r\n  var is = type === 'is';\r\n  var callback;\r\n  switch(_type) {\r\n    case utils.TYPE_STRING:\r\n      var parts = checker.split(':');\r\n      var _checker = defaults.checkers[parts[0]];\r\n      if (typeof _checker === 'undefined') {\r\n        throw new TypeError('Checker ' + parts[0] + ' is not defined.');\r\n      }\r\n      callback = function(value) {\r\n        var result = _checker.call(this, parts.slice(1));\r\n        return is ?  result: !result;\r\n      };\r\n      break;\r\n    case utils.TYPE_REGEXP:\r\n      callback = function(value) {\r\n        var result = checker.test(value);\r\n        return is ? result : !result;\r\n      }\r\n      break;\r\n    case utils.TYPE_FUNCTION:\r\n      callback = checker;\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker must be a String/RegExp/Function.');\r\n  }\r\n  registAPI(apiName, callback);\r\n  return Validator;\r\n};\r\n\r\n/**\r\n * list all registed api\r\n */\r\nValidator.api.list = function() {\r\n  return rules;\r\n};\r\n\n\r\nexports.Validator = Validator;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}