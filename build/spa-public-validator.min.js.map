{"version":3,"sources":["spa-public-validator.js"],"names":["factory","window","exports","getType","obj","Object","prototype","toString","call","isArray","TYPE_ARRAY","isFunction","TYPE_FUNCTION","getValue","htmlElement","value","getAttribute","priority","v1","v2","priorityTable","parseRules","ruleString","c","wordQueue","exQueue","opStack","i","word","op","len","length","push","j","pop","execFn","type","values","isApi","parts","split","replace","checker","apiCheckers","defaultCheckers","this","cs","TypeError","params","_params","slice","utils","getLengthParams","getRangeParams","unshift","_values","k","apply","calculateRules","ruleQueue","ruleStack","exp","s2","s1","result","TYPE_STRING","Validator","validations","vs","fields","field","rules","queue","$fs","rs","isEmpty","TYPE_UNDEFINED","equal","empty","pass","long","min","max","range","leftEqual","rightEqual","registDefaultCheckers","name","matcher","callback","TYPE_REGEXP","test","is","not","arguments","registApiChecker","err","Error","hasOwn","p","hasOwnProperty","trim","str","paramString","errorString","match","Infinity","||","&&","!","vprtt","add","setRule","rule","self","realChecker","check","$fields","context","fail","remove","removeRule","defaultMatchers","url","email","number","int","positive","negative","varName","nickName","QQ","upperCase","lowerCase","ruleName","m","api","FormValidator","formOrSelector","$form","document","querySelectorAll","$field","constructor"],"mappings":"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","file":"spa-public-validator.min.js","sourcesContent":["(function(factory) {\r\n    factory(window);\r\n}(function(exports) {\r\n\n// 为了兼容不支持querySelectorAll的浏览器，同时又不需要使用jQuery，使用原生API获取元素\r\n// 只是为了获取特定元素，所以只支持简单的选择器\r\n// 1. id选择器\r\n// 2. 类选择器\r\n// 3. 标签选择器\r\n// 4. 属性选择器\r\n\r\n/**\r\n * query selector\r\n * 这个函数是不完整的！不公开使用\r\n * @param {String} selector\r\n * @return {Array} element list\r\n */\r\nvar query = function(selector) {\r\n  \r\n};\r\n\n// shortcut\r\nvar hasOwn = function(p) {\r\n  return this.hasOwnProperty(p);\r\n};\r\n\r\n// Object Type Const String\r\nvar TYPE_STRING = '[object String]'\r\n  , TYPE_ARRAY = '[object Array]'\r\n  , TYPE_FUNCTION = '[object Function]'\r\n  , TYPE_REGEXP = '[object RegExp]'\r\n  , TYPE_UNDEFINED = 'undefined';\r\n\r\nvar utils = {};\r\n\r\n/**\r\n * Utils: Get Object Type\r\n * @param {Object} obj\r\n * @return {String} object type\r\n */\r\nfunction getType(obj) {\r\n  return Object.prototype.toString.call(obj);\r\n};\r\n\r\n// HACK: 验证的时候，不作trim处理\r\nutils.trim = function(str) {\r\n  return str.replace(/^\\s+|\\s$/g, '');\r\n};\r\n\r\n/**\r\n * Utils: isArray\r\n * @param {Object} obj\r\n * @return {Boolean} is Array or not\r\n */\r\nfunction isArray(obj) {\r\n  return getType(obj) === TYPE_ARRAY;\r\n};\r\n\r\n/**\r\n * Utils: isFunction\r\n * @param {Object} obj\r\n * @return {Boolean} is Function or not\r\n */\r\nfunction isFunction(obj) {\r\n  return getType(obj) === TYPE_FUNCTION;\r\n};\r\n\r\n/**\r\n * Utils: getValue\r\n * @param {HTMLElement} htmlElement\r\n * @return {String} value of htmlElement\r\n */\r\nfunction getValue(htmlElement) {\r\n  return htmlElement.value || htmlElement.getAttribute('data-value') || '';\r\n}\r\n\r\n/**\r\n * 解析length规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n */\r\nutils.getLengthParams = function(paramString) {\r\n  var errorString = 'The parameters for length is illegal.';\r\n  paramString = paramString[0]; // HACK: 假设只有一个参数\r\n  var matcher = /\\s*([\\(\\[])\\s*(\\d+)?\\s*,\\s*(\\d+)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为0；如果没有最大限制，最大限制为Infinite\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[3];\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = 0;\r\n  } else if (result[1] === '(') {\r\n    min = +min+1;\r\n  } else if (result[1] === '[') {\r\n    min = +min;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else if (result[4] === ')') {\r\n    max = +max-1;\r\n  } else if (result[4] === ']'){\r\n    max = +max;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (min !== min || max !== max) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  return [min, max];\r\n};\r\n\r\n/**\r\n * 解析range规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n * @throws {TypeError} 'The parameters for range is illegal.'\r\n * TODO: 类似length规则\r\n */\r\nutils.getRangeParams = function(paramString) {\r\n  var errorString = 'The parameters for range is illegal.';\r\n  paramString = paramString[0];\r\n  var matcher = /\\s*([\\(\\[])\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*,\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为负无穷；如果没有最大限制，最大限制为正无穷\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[6], leftEqual, rightEqual;\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = -Infinity;\r\n  } else {\r\n    min = +min;\r\n  }\r\n  leftEqual = result[1] === '[';\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else {\r\n    max = +max;\r\n  }\r\n  rightEqual = result[10] === ']';\r\n  return [leftEqual, min, max, rightEqual];\r\n};\r\n\r\nvar priorityTable = {\r\n  \"||\": 0,\r\n  \"&&\": 1,\r\n  \"!\": 2\r\n};\r\n\r\nfunction priority(v1, v2) {\r\n  return priorityTable[v1] >= priorityTable[v2];\r\n}\r\n\r\n/**\r\n * parse rules\r\n * 解析规则字符串，获取规则名称，规则参数，与或非逻辑\r\n * 用花括号表示分组，因为小括号和中括号已经作为参数有用\r\n * @param {String} ruleString\r\n * @return {Array} rules\r\n */\r\nfunction parseRules(ruleString) { // 假设输入为： \"{A||!B}&&C\"\r\n  var wordQueue = []; // 词队列\r\n  var exQueue = []; // 后缀表达式队列\r\n  var opStack = []; // 操作符栈\r\n  // 1. 分词：wordQueue = ['{', 'A', '||', '!', 'B', '}', '&&', 'C']\r\n  var i = 0, c, word = '', op = '', len = ruleString.length;\r\n  while (i < len) {\r\n    c = ruleString[i++];\r\n    switch (c) {\r\n      case '{':\r\n      case '}':\r\n      case '!':\r\n        if (word.length > 0) {\r\n          wordQueue.push(word);\r\n        }\r\n        wordQueue.push(c);\r\n        word = '';\r\n        break;\r\n      case '&':\r\n      case '|':\r\n        if (c === op) {\r\n          if (word.length > 0) {\r\n            wordQueue.push(word);\r\n          }\r\n          wordQueue.push(op+op);\r\n          word = '';\r\n          op = '';\r\n        } else {\r\n          op += c;\r\n        }\r\n        break;\r\n      default:\r\n        word += c;\r\n    }\r\n  }\r\n  if (word.length > 0) {\r\n    wordQueue.push(word);\r\n  }\r\n  // 2. 将中缀转成后缀并输入后缀表达式栈：exQueue = ['A', 'B', '!', '||', 'C', '&&'];\r\n  i = 0;\r\n  len = wordQueue.length;\r\n  var j, pop;\r\n  while(i < len) {\r\n    c = wordQueue[i++];\r\n    switch (c) {\r\n      case '{':\r\n        opStack.push(c);\r\n        break;\r\n      case '||':\r\n      case '&&':\r\n      case '!':\r\n        j = opStack.length - 1;\r\n        while(j >= 0 && (opStack[j] === '||' ||  opStack[j] === '&&' || opStack[j] === '!')) {\r\n          if (priority(opStack[j], c)) { // 如果栈顶操作符优先级比较大或相等，就出栈\r\n            exQueue.push(opStack.pop());\r\n          } else {\r\n            break;\r\n          }\r\n          j--;\r\n        }\r\n        opStack.push(c);\r\n        break;\r\n      case '}':\r\n        j = opStack.length - 1;\r\n        while(j >= 0) {\r\n          pop = opStack.pop();\r\n          if (pop === '{') {\r\n            break;\r\n          }\r\n          exQueue.push(pop);\r\n          j--;\r\n        }\r\n        break;\r\n      default:\r\n        exQueue.push(c);\r\n    }\r\n  }\r\n  if (opStack.length > 0) {\r\n    j = opStack.length - 1;\r\n    while(j >= 0) {\r\n      pop = opStack.pop();\r\n      if (pop === '{') {\r\n        break;\r\n      }\r\n      exQueue.push(pop);\r\n      j--\r\n    }\r\n  }\r\n  // console.log('转成后缀：' + exQueue);\r\n  return exQueue;\r\n}\r\n\r\n/**\r\n * execute checker\r\n * @param {String} type\r\n * @param {Array} values\r\n * @param {Boolean} isApi\r\n * @return {Boolean} result\r\n */\r\nfunction execFn(type, values, isApi) {\r\n  var parts = type.split(':');\r\n  type = parts[0].replace(/length/i, 'long');\r\n  var checker = isApi ? apiCheckers[type] || defaultCheckers[type] : this.cs[type] || apiCheckers[type] || defaultCheckers[type];\r\n  // checker可能不是函数，checker可能是由另外一些规则组成的表达式，所以要继续计算\r\n  // switch(getType(checker)) {\r\n  //   case TYPE_STRING:\r\n  //     break;\r\n  //   case TYPE_FUNCTION:\r\n  //     break;\r\n  //   default:\r\n  //     throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  // }\r\n  if (!isFunction(checker)) {\r\n    throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  }\r\n  var params;\r\n  var _params = parts.slice(1);\r\n  switch (type) {\r\n    case 'long':\r\n      params = utils.getLengthParams(_params);\r\n      break;\r\n    case 'range':\r\n      params = utils.getRangeParams(_params);\r\n      break;\r\n    default:\r\n      params = _params;\r\n  }\r\n  if (isApi) {\r\n    params.unshift(values);\r\n  } else {\r\n    var _values  = [];\r\n    for (var k = 0; k < values.length; ++k) {\r\n      _values.push(getValue(values[k]));\r\n    }\r\n    params.unshift(_values);\r\n  }\r\n  return checker.apply(null, params);\r\n}\r\n\r\n/**\r\n * 解析API后缀表达式\r\n * @param {Array} ruleQueue\r\n * @param {Array} values\r\n * @return {Boolean} result\r\n */\r\nfunction calculateRules(ruleQueue, values, isApi) {\r\n\r\n  var ruleStack = [];\r\n  for (var k = 0; k < ruleQueue.length; ++k) {\r\n    var exp = ruleQueue[k];\r\n    switch (exp) {\r\n      case '&&':\r\n        var s2 = ruleStack.pop()\r\n          , s1 = ruleStack.pop();\r\n        var result = (getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1) && (getType(s2) === TYPE_STRING ? execFn.call(this, s2, values, isApi) : s2);\r\n        ruleStack.push(result);\r\n        break;\r\n      case '||':\r\n        var s2 = ruleStack.pop()\r\n          , s1 = ruleStack.pop();\r\n        var result = (getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1) || (getType(s2) === TYPE_STRING ? execFn.call(this, s2, values, isApi) : s2);\r\n        ruleStack.push(result);\r\n        break;\r\n      case '!':\r\n        var s1 = ruleStack.pop();\r\n        var result = !(getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1);\r\n        ruleStack.push(result);\r\n        break;\r\n      default:\r\n        ruleStack.push(exp);\r\n    }\r\n  }\r\n  var pop = ruleStack.pop();\r\n  return getType(pop) === TYPE_STRING ? execFn.call(this, pop, values, isApi) : pop;\r\n\r\n}\r\n\n/**\r\n * @constructor\r\n * @class Validator\r\n * @param {Array|Object} validations\r\n */\r\nfunction Validator(validations) {\r\n  validations = validations || [];\r\n  this.cs = {};\r\n  this.vs = [];\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0; i < validations.length; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    for (var k = 0; k < rules.length; ++k) {\r\n      rules[k].queue = parseRules(rules[k].type);\r\n    }\r\n    this.vs.push({\r\n      $fs: fields,\r\n      rs: rules\r\n    });\r\n  }\r\n};\r\n\r\nvar vprtt = Validator.prototype;\r\n\r\n/**\r\n * @method .add(rules)\r\n * 添加自定义规则\r\n * @param {Object} rules\r\n * @return this\r\n * this.checkers可以是函数，或者checker表达式队列\r\n */\r\nvprtt.add = function(rules) {\r\n  function setRule(rule) {\r\n    var checker = rule.rule;\r\n    var callback;\r\n    switch (getType(checker)) {\r\n      case TYPE_FUNCTION:\r\n        callback = checker;\r\n        break;\r\n      case TYPE_STRING:\r\n        var self = this;\r\n        // TODO: 解析规则，生成的是一个后缀表达式（队列）\r\n        // 可以使用defaultCheckers或者apiCheckers，如果两个里面都没有，就抛出异常\r\n        // 此处不直接生成checker函数，而是把表达式解析成后缀形式（队列存储），在验证的时候（执行.check()时）再执行表达式运算\r\n\r\n        // var ruleQueue;\r\n        // try {\r\n        //   ruleQueue = parseRules(checker);\r\n        // } catch(error) {\r\n        //   throw new Error(\"Cannot parse rule expression.\");\r\n        // }\r\n        callback = function(values) {\r\n          var realChecker = self.cs[checker] || apiCheckers[checker] || defaultCheckers[checker];\r\n          if (typeof realChecker === TYPE_UNDEFINED) {\r\n            throw new TypeError('Cannot find checker: ' + checker);\r\n          }\r\n          return realChecker(values);\r\n        };\r\n        break;\r\n      case TYPE_REGEXP:\r\n        callback = function(values) {\r\n          var pass = true;\r\n          if (isArray(values)) {\r\n            for (var i = 0, len = values.length; i < len; ++i) {\r\n              if (!checker.test(values[i])) {\r\n                pass = false;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            if (!rule.rule.test(values)) {\r\n              pass = false;\r\n            }\r\n          }\r\n          return pass;\r\n        };\r\n        break;\r\n      default:\r\n        throw new TypeError('Rule type not support.');\r\n    }\r\n    this.cs[rule.name] = callback;\r\n  }\r\n  if (isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      setRule.call(this, rules[i]);\r\n    }\r\n  } else {\r\n    setRule.call(this, rules);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @return {Boolean} pass or not\r\n */\r\nvprtt.check = function(obj) {\r\n  var pass = true;\r\n  var validations = this.vs;\r\n  for (var i = 0; i < validations.length; ++i) {\r\n    var $fields = validations[i].$fs;\r\n    var rules = validations[i].rs;\r\n    for (var j = 0; j < rules.length; ++j) {\r\n      var rule = rules[j];\r\n      // 现在开始解析后缀表达式\r\n      pass = calculateRules.call(this, rule.queue, $fields, false);\r\n      if (!pass) {\r\n        var context = $fields.length < 2 ? $fields[0] : $fields;\r\n        rule.fail.call(context, obj);\r\n        break;\r\n      }\r\n    }\r\n    if (!pass) break;\r\n  }\r\n  return pass;\r\n};\r\n\r\n/**\r\n * @method .remove(rules)\r\n * 移除自定义规则\r\n * @param {Array|String} rules\r\n * @return this\r\n */\r\nvprtt.remove = function(rules) {\r\n  function removeRule(rule) {\r\n    if (typeof this.cs[rule] !== TYPE_UNDEFINED) {\r\n      delete this.cs[rule];\r\n    }\r\n  }\r\n  if (isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      removeRule.call(this, rules[i]);\r\n    }\r\n  } else {\r\n    removeRule.call(this, rules);\r\n  }\r\n  return this;\r\n};\r\n\n// checker函数的第一个参数总是一个数组，这个数组就是待检测的字符串数组\r\n// 从第二个参数起，每个checker函数带有不同长度的参数列表。例如，empty函数的参数列表长度为0，long函数的参数列表长度为2（暂时，有待改进）\r\nvar defaultCheckers = {};\r\n\r\nvar defaultMatchers = {\r\n  ////////// 正则匹配\r\n  url: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/\r\n  , email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i\r\n  , number: /^(0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?$/\r\n  , int: /^(0|([\\+\\-]?[1-9]\\d*))$/\r\n  // 正整数\r\n  , positive: /^\\+?[1-9]\\d*$/\r\n  // 负整数\r\n  , negative: /^\\-[1-9]\\d*$/\r\n  // 变量名：只能包含英文字母/数字/下划线，且不能以数字开头\r\n  , varName: /^[a-zA-Z_][a-zA-Z0-9_]*$/\r\n  // 昵称：只能包含中文/英文字母/数字/下划线，且不能以数字开头\r\n  , nickName: /^[\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z_][\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z0-9_]*$/\r\n  // QQ\r\n  , QQ: /^[1-9][0-9]{4,}$/\r\n  // 身份证号\r\n  // 手机号\r\n  // 电话号码\r\n  // 邮政编码\r\n  // IP\r\n  // IPV4\r\n  // IPV6\r\n  // 全大写\r\n  , upperCase: /^[A-Z]+$/g\r\n  // 全小写\r\n  , lowerCase: /^[a-z]$/g\r\n  ////////// 非正则匹配\r\n  // 空限制\r\n  , empty: empty\r\n  // 相等\r\n  , equal: equal\r\n  // 长度范围限制\r\n  , long: long\r\n  // 数值大小限制\r\n  , range: range\r\n};\r\n\r\n/**\r\n * 判断值是否为空\r\n * @param {Object} value\r\n * 如果value为null|undefined|空字符串，就判断为真，否则判断为假\r\n * @return {Boolean} 是否为空\r\n */\r\nfunction isEmpty(value) {\r\n  return value === null || typeof value === TYPE_UNDEFINED || value === '';\r\n}\r\n\r\n/**\r\n * defaults.checkers: equal check\r\n * @param {Array} values\r\n * @return {Boolean} equal or not\r\n */\r\nfunction equal(values) {\r\n  var equal = true;\r\n  for (var i = 0; i < values.length - 1; ++i) {\r\n    if (values[i] !== values[i+1]) {\r\n      equal = false;\r\n      break;\r\n    }\r\n  }\r\n  return equal;\r\n}\r\n\r\n/**\r\n * defaults.checkers: empty check\r\n * @param {Array} values\r\n * @return {Boolean} yes or no\r\n */\r\nfunction empty(values) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    if (!isEmpty(values[i])) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\r\n/**\r\n * defaults.checkers: length check\r\n * @param {Array} values\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @return {Boolean} yes or no\r\n */\r\nfunction long(values, min, max) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var length = values[i].length;\r\n    if (length < min || length > max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\r\n/**\r\n * defaults.check: number range check\r\n * 这个函数和long类似，但是不是用来限制长度的，而是用来限制数值本身的\r\n * @param {Array} values\r\n * @param {Boolean} leftEqual 是否大于等于\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @param {Boolean} rightEqual 是否小于等于\r\n * @return {Boolean} yes or no\r\n */\r\nfunction range(values, leftEqual, min, max, rightEqual) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var value = values[i];\r\n    if (leftEqual && value < min || rightEqual && value > max || !leftEqual && value <= min || !rightEqual && value >= max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\nvar apiCheckers = {};\r\n\r\n/**\r\n * @static Validator.is\r\n * 优先级： api.checkers > defaults.checkers\r\n * @param {String} ruleName\r\n * @param {String} value\r\n * @return {Boolean} is or not\r\n */\r\nvar is = Validator.is = function(ruleName, value) {\r\n  var checker = apiCheckers[ruleName] || defaultCheckers[ruleName];\r\n  var result;\r\n  switch(getType(checker)) {\r\n    case TYPE_ARRAY:\r\n      result = calculateRules.call(this, checker, value, true);\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      result = checker(value);\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker for ' + ruleName + ' is not defined.');\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @static Validator.not\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar not = Validator.not = function(ruleName, value) {\r\n  return !is(ruleName, value);\r\n};\r\n\r\n/**\r\n * This helper helps to regist default checkers, `is` api and `not` api\r\n * 所有的defaultCheckers都是函数\r\n * @param {String} name\r\n * @param {Object} matcher\r\n */\r\nfunction registDefaultCheckers(name, matcher) {\r\n  var callback;\r\n  switch(getType(matcher)) {\r\n    case TYPE_REGEXP:\r\n      callback = function(value) {\r\n        return matcher.test(value);\r\n      };\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      callback = matcher;\r\n      break;\r\n    default:\r\n      throw new TypeError('Matcher Type Error.');\r\n  }\r\n  defaultCheckers[name] = callback;\r\n  is[name] = callback;\r\n  not[name] = function() {\r\n    return !callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nfor (var m in defaultMatchers) {\r\n  if (hasOwn.call(defaultMatchers, m)) {\r\n    registDefaultCheckers(m, defaultMatchers[m]);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String|RegExp|Function} checker\r\n * checker可以是字符串，正则表达式，或者函数\r\n * 当checker是字符串时，表示基于内建规则组合（表达式）的新规则\r\n * 当checker是正则表达式时，表示一条规则，它必须通过该正则表达式的完全匹配\r\n * 当checker是函数时，该函数的返回值必须是布尔型\r\n * This function may throw a `TypeError` if checker's type is not support.\r\n */\r\nfunction registApiChecker(type, checker) {\r\n  var callback;\r\n  switch(getType(checker)) {\r\n    case TYPE_STRING:\r\n      // TODO: 解析规则，生成的是一个后缀表达式（队列）\r\n      // 只能使用defaultCheckers，如果defaultCheckers里没有，就抛出异常\r\n      // 此处不直接生成checker函数，而是把表达式解析成后缀形式（队列存储），在验证的时候（执行.check()或者Validator.is()/Validator.not()时）再执行表达式运算\r\n      var queue;\r\n      try {\r\n        queue = parseRules(checker);\r\n      } catch(err) {\r\n        throw new Error(err);\r\n      }\r\n      callback = queue;\r\n      break;\r\n    case TYPE_REGEXP:\r\n      callback = function(value) {\r\n        return checker.test(value);\r\n      }\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      callback = checker;\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker must be a String/RegExp/Function.');\r\n  }\r\n  apiCheckers[type] = callback;\r\n}\r\n\r\n/**\r\n * @static Validator.api(rules)\r\n * @param {Object} rules\r\n * @return Validator\r\n */\r\nValidator.api = function(rules) {\r\n\r\n  for (var name in rules) {\r\n    if (hasOwn.call(rules, name)) {\r\n      registApiChecker.call(this, name, rules[name]);\r\n    }\r\n  }\r\n  return this;\r\n\r\n};\r\n\n// 暂时不做扩展：没有必要做扩展了，已经够用了\n\n/**\r\n * @constructor\r\n * @class FormValidator\r\n * @extends Validator\r\n * @param {HTMLElement|String} formOrSelector\r\n * @param {Object|Array} validations\r\n * TODO: 增加对checkbox,radio的支持\r\n */\r\nvar FormValidator = function(formOrSelector, validations) {\r\n  this.vs = [];\r\n  this.cs = {};\r\n  if (typeof formOrSelector === 'string') {\r\n    this.$form = document.querySelectorAll(formOrSelector)[0]; // TODO: querySelectorAll兼容性\r\n  } else {\r\n    this.$form = formOrSelector;\r\n  }\r\n  validations = validations || [];\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $fields = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      var $field = this.$form.querySelectorAll('[name=' + fields[j] + ']')[0] || this.$form.querySelectorAll('[data-name=' + fields[j] + ']')[0]; // TODO: querySelectorAll兼容性\r\n      if (typeof $field === TYPE_UNDEFINED) {\r\n        throw new TypeError('未找到域：' + fields[j]);\r\n      }\r\n      $fields.push($field);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    for (var k = 0; k < rules.length; ++k) {\r\n      rules[k].queue = parseRules(rules[k].type);\r\n    }\r\n    this.vs.push({\r\n      $fs: $fields,\r\n      rs: rules\r\n    });\r\n  }\r\n};\r\n\r\nFormValidator.prototype = new Validator();\r\nFormValidator.prototype.constructor = FormValidator;\r\n\r\n/**\r\n * @method .check()\r\n * @override Validator.prototype.check()\r\n * @return {Boolean} pass or not\r\n */\r\nFormValidator.prototype.check = function() {\r\n  return Validator.prototype.check.call(this, this.$form);\r\n};\r\n\n\r\nexports.Validator = Validator;\r\n\r\nexports.FormValidator = FormValidator;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}