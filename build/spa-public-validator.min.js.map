{"version":3,"sources":["spa-public-validator.js"],"names":["factory","window","exports","getType","obj","Object","prototype","toString","call","isArray","TYPE_ARRAY","getValue","htmlElement","value","getAttribute","priority","v1","v2","priorityTable","parseRules","ruleString","c","wordQueue","exQueue","opStack","i","word","op","len","length","push","j","pop","execFn","type","values","isApi","parts","split","replace","result","checker","apiCheckers","defaultCheckers","this","cs","calculateRules","TYPE_FUNCTION","params","_params","slice","utils","getLengthParams","getRangeParams","unshift","_values","k","apply","TypeError","ruleQueue","ruleStack","exp","s2","s1","TYPE_STRING","Validator","validations","vs","fields","field","rules","queue","$fs","rs","isEmpty","TYPE_UNDEFINED","equal","empty","pass","long","min","max","range","leftEqual","rightEqual","registDefaultCheckers","name","matcher","callback","TYPE_REGEXP","test","is","not","arguments","registApiChecker","err","Error","hasOwn","p","hasOwnProperty","trim","str","paramString","errorString","match","Infinity","||","&&","!","vprtt","add","setRule","rule","error","check","$fields","context","fail","remove","removeRule","defaultMatchers","url","email","number","int","positive","negative","varName","nickName","QQ","upperCase","lowerCase","ruleName","m","api","list","console","log","FormValidator","formOrSelector","$form","document","querySelectorAll","$field","constructor"],"mappings":"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","file":"spa-public-validator.min.js","sourcesContent":["(function(factory) {\r\n    factory(window);\r\n}(function(exports) {\r\n\n// 为了兼容不支持querySelectorAll的浏览器，同时又不需要使用jQuery，使用原生API获取元素\r\n// 只是为了获取特定元素，所以只支持简单的选择器\r\n// 1. id选择器\r\n// 2. 类选择器\r\n// 3. 标签选择器\r\n// 4. 属性选择器\r\n\r\n/**\r\n * query selector\r\n * 这个函数是不完整的！不公开使用\r\n * @param {String} selector\r\n * @return {Array} element list\r\n */\r\nvar query = function(selector) {\r\n  \r\n};\r\n\n// shortcut\r\nvar hasOwn = function(p) {\r\n  return this.hasOwnProperty(p);\r\n};\r\n\r\n// Object Type Const String\r\nvar TYPE_STRING = '[object String]'\r\n  , TYPE_ARRAY = '[object Array]'\r\n  , TYPE_FUNCTION = '[object Function]'\r\n  , TYPE_REGEXP = '[object RegExp]'\r\n  , TYPE_UNDEFINED = 'undefined';\r\n\r\nvar utils = {};\r\n\r\n/**\r\n * Utils: Get Object Type\r\n * @param {Object} obj\r\n * @return {String} object type\r\n */\r\nfunction getType(obj) {\r\n  return Object.prototype.toString.call(obj);\r\n};\r\n\r\n// HACK: 验证的时候，不作trim处理\r\nutils.trim = function(str) {\r\n  return str.replace(/^\\s+|\\s$/g, '');\r\n};\r\n\r\n/**\r\n * Utils: isArray\r\n * @param {Object} obj\r\n * @return {Boolean} is Array or not\r\n */\r\nfunction isArray(obj) {\r\n  return getType(obj) === TYPE_ARRAY;\r\n};\r\n\r\n/**\r\n * Utils: isFunction\r\n * @param {Object} obj\r\n * @return {Boolean} is Function or not\r\n */\r\nfunction isFunction(obj) {\r\n  return getType(obj) === TYPE_FUNCTION;\r\n};\r\n\r\n/**\r\n * Utils: getValue\r\n * @param {HTMLElement} htmlElement\r\n * @return {String} value of htmlElement\r\n */\r\nfunction getValue(htmlElement) {\r\n  return htmlElement.value || htmlElement.getAttribute('data-value') || '';\r\n}\r\n\r\n/**\r\n * 解析length规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n */\r\nutils.getLengthParams = function(paramString) {\r\n  var errorString = 'The parameters for length is illegal.';\r\n  paramString = paramString[0]; // HACK: 假设只有一个参数\r\n  var matcher = /\\s*([\\(\\[])\\s*(\\d+)?\\s*,\\s*(\\d+)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为0；如果没有最大限制，最大限制为Infinite\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[3];\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = 0;\r\n  } else if (result[1] === '(') {\r\n    min = +min+1;\r\n  } else if (result[1] === '[') {\r\n    min = +min;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else if (result[4] === ')') {\r\n    max = +max-1;\r\n  } else if (result[4] === ']'){\r\n    max = +max;\r\n  } else {\r\n    throw new TypeError(errorString);\r\n  }\r\n  if (min !== min || max !== max) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  return [min, max];\r\n};\r\n\r\n/**\r\n * 解析range规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n * @throws {TypeError} 'The parameters for range is illegal.'\r\n * TODO: 类似length规则\r\n */\r\nutils.getRangeParams = function(paramString) {\r\n  var errorString = 'The parameters for range is illegal.';\r\n  paramString = paramString[0];\r\n  var matcher = /\\s*([\\(\\[])\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*,\\s*((0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为负无穷；如果没有最大限制，最大限制为正无穷\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError(errorString);\r\n  }\r\n  var min = result[2], max = result[6], leftEqual, rightEqual;\r\n  if (typeof min === TYPE_UNDEFINED) {\r\n    min = -Infinity;\r\n  } else {\r\n    min = +min;\r\n  }\r\n  leftEqual = result[1] === '[';\r\n  if (typeof max === TYPE_UNDEFINED) {\r\n    max = Infinity;\r\n  } else {\r\n    max = +max;\r\n  }\r\n  rightEqual = result[10] === ']';\r\n  return [leftEqual, min, max, rightEqual];\r\n};\r\n\r\nvar priorityTable = {\r\n  \"||\": 0,\r\n  \"&&\": 1,\r\n  \"!\": 2\r\n};\r\n\r\nfunction priority(v1, v2) {\r\n  return priorityTable[v1] >= priorityTable[v2];\r\n}\r\n\r\n/**\r\n * parse rules\r\n * 解析规则字符串，获取规则名称，规则参数，与或非逻辑\r\n * 用花括号表示分组，因为小括号和中括号已经作为参数有用\r\n * @param {String} ruleString\r\n * @return {Array} rules\r\n */\r\nfunction parseRules(ruleString) { // 假设输入为： \"{A||!B}&&C\"\r\n  var wordQueue = []; // 词队列\r\n  var exQueue = []; // 后缀表达式队列\r\n  var opStack = []; // 操作符栈\r\n  // 1. 分词：wordQueue = ['{', 'A', '||', '!', 'B', '}', '&&', 'C']\r\n  var i = 0, c, word = '', op = '', len = ruleString.length;\r\n  while (i < len) {\r\n    c = ruleString[i++];\r\n    switch (c) {\r\n      case '{':\r\n      case '}':\r\n      case '!':\r\n        if (word.length > 0) {\r\n          wordQueue.push(word);\r\n        }\r\n        wordQueue.push(c);\r\n        word = '';\r\n        break;\r\n      case '&':\r\n      case '|':\r\n        if (c === op) {\r\n          if (word.length > 0) {\r\n            wordQueue.push(word);\r\n          }\r\n          wordQueue.push(op+op);\r\n          word = '';\r\n          op = '';\r\n        } else {\r\n          op += c;\r\n        }\r\n        break;\r\n      default:\r\n        word += c;\r\n    }\r\n  }\r\n  if (word.length > 0) {\r\n    wordQueue.push(word);\r\n  }\r\n  // 2. 将中缀转成后缀并输入后缀表达式栈：exQueue = ['A', 'B', '!', '||', 'C', '&&'];\r\n  i = 0;\r\n  len = wordQueue.length;\r\n  var j, pop;\r\n  while(i < len) {\r\n    c = wordQueue[i++];\r\n    switch (c) {\r\n      case '{':\r\n        opStack.push(c);\r\n        break;\r\n      case '||':\r\n      case '&&':\r\n      case '!':\r\n        j = opStack.length - 1;\r\n        while(j >= 0 && (opStack[j] === '||' ||  opStack[j] === '&&' || opStack[j] === '!')) {\r\n          if (priority(opStack[j], c)) { // 如果栈顶操作符优先级比较大或相等，就出栈\r\n            exQueue.push(opStack.pop());\r\n          } else {\r\n            break;\r\n          }\r\n          j--;\r\n        }\r\n        opStack.push(c);\r\n        break;\r\n      case '}':\r\n        j = opStack.length - 1;\r\n        while(j >= 0) {\r\n          pop = opStack.pop();\r\n          if (pop === '{') {\r\n            break;\r\n          }\r\n          exQueue.push(pop);\r\n          j--;\r\n        }\r\n        break;\r\n      default:\r\n        exQueue.push(c);\r\n    }\r\n  }\r\n  if (opStack.length > 0) {\r\n    j = opStack.length - 1;\r\n    while(j >= 0) {\r\n      pop = opStack.pop();\r\n      if (pop === '{') {\r\n        break;\r\n      }\r\n      exQueue.push(pop);\r\n      j--\r\n    }\r\n  }\r\n  // console.log('转成后缀：' + exQueue);\r\n  return exQueue;\r\n}\r\n\r\n/**\r\n * execute checker\r\n * @param {String} type\r\n * @param {Array} values\r\n * @param {Boolean} isApi\r\n * @return {Boolean} result\r\n */\r\nfunction execFn(type, values, isApi) {\r\n  var parts = type.split(':');\r\n  type = parts[0].replace(/length/i, 'long');\r\n  var checker = isApi ? apiCheckers[type] || defaultCheckers[type] : this.cs[type] || apiCheckers[type] || defaultCheckers[type];\r\n\r\n  var result;\r\n  switch(getType(checker)) {\r\n    // checker可能不是函数，checker可能是由另外一些规则组成的表达式，所以要继续计算\r\n    case TYPE_ARRAY:\r\n      result = calculateRules.call(this, checker, values, isApi);\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      var params;\r\n      var _params = parts.slice(1);\r\n      switch (type) {\r\n        case 'long':\r\n          params = utils.getLengthParams(_params);\r\n          break;\r\n        case 'range':\r\n          params = utils.getRangeParams(_params);\r\n          break;\r\n        default:\r\n          params = _params;\r\n      }\r\n      if (isApi) {\r\n        params.unshift(values);\r\n      } else {\r\n        var _values  = [];\r\n        for (var k = 0; k < values.length; ++k) {\r\n          _values.push(getValue(values[k]));\r\n        }\r\n        params.unshift(_values);\r\n      }\r\n      result = checker.apply(null, params);\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * 解析API后缀表达式\r\n * @param {Array} ruleQueue\r\n * @param {Array} values\r\n * @return {Boolean} result\r\n */\r\nfunction calculateRules(ruleQueue, values, isApi) {\r\n\r\n  var ruleStack = [];\r\n  for (var k = 0; k < ruleQueue.length; ++k) {\r\n    var exp = ruleQueue[k];\r\n    switch (exp) {\r\n      case '&&':\r\n        var s2 = ruleStack.pop()\r\n          , s1 = ruleStack.pop();\r\n        var result = (getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1) && (getType(s2) === TYPE_STRING ? execFn.call(this, s2, values, isApi) : s2);\r\n        ruleStack.push(result);\r\n        break;\r\n      case '||':\r\n        var s2 = ruleStack.pop()\r\n          , s1 = ruleStack.pop();\r\n        var result = (getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1) || (getType(s2) === TYPE_STRING ? execFn.call(this, s2, values, isApi) : s2);\r\n        ruleStack.push(result);\r\n        break;\r\n      case '!':\r\n        var s1 = ruleStack.pop();\r\n        var result = !(getType(s1) === TYPE_STRING ? execFn.call(this, s1, values, isApi) : s1);\r\n        ruleStack.push(result);\r\n        break;\r\n      default:\r\n        ruleStack.push(exp);\r\n    }\r\n  }\r\n  var pop = ruleStack.pop();\r\n  return getType(pop) === TYPE_STRING ? execFn.call(this, pop, values, isApi) : pop;\r\n\r\n}\r\n\n/**\r\n * @constructor\r\n * @class Validator\r\n * @param {Array|Object} validations\r\n */\r\nfunction Validator(validations) {\r\n  validations = validations || [];\r\n  this.cs = {};\r\n  this.vs = [];\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0; i < validations.length; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    for (var k = 0; k < rules.length; ++k) {\r\n      rules[k].queue = parseRules(rules[k].type);\r\n    }\r\n    this.vs.push({\r\n      $fs: fields,\r\n      rs: rules\r\n    });\r\n  }\r\n};\r\n\r\nvar vprtt = Validator.prototype;\r\n\r\n/**\r\n * @method .add(rules)\r\n * 添加自定义规则\r\n * @param {Object} rules\r\n * @return this\r\n * this.checkers可以是函数，或者checker表达式队列\r\n */\r\nvprtt.add = function(rules) {\r\n  function setRule(name, rule) {\r\n    var checker = rule;\r\n    var callback;\r\n    switch (getType(checker)) {\r\n      case TYPE_FUNCTION:\r\n        callback = checker;\r\n        break;\r\n      case TYPE_STRING:\r\n        // 解析规则，生成的是一个后缀表达式\r\n        // 可以使用defaultCheckers或者apiCheckers\r\n        // 此处不直接生成checker函数，而是把表达式解析成后缀形式（队列存储），在验证的时候（执行.check()时）再执行表达式运算\r\n        try {\r\n          callback = parseRules(checker);\r\n        } catch(error) {\r\n          throw new Error(\"Cannot parse rule expression.\");\r\n        }\r\n\r\n        break;\r\n      case TYPE_REGEXP:\r\n        callback = function(values) {\r\n          var pass = true;\r\n          if (isArray(values)) {\r\n            for (var i = 0, len = values.length; i < len; ++i) {\r\n              if (!checker.test(values[i])) {\r\n                pass = false;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            if (!rule.rule.test(values)) {\r\n              pass = false;\r\n            }\r\n          }\r\n          return pass;\r\n        };\r\n        break;\r\n      default:\r\n        throw new TypeError('Rule type not support.');\r\n    }\r\n    this.cs[name] = callback;\r\n  }\r\n\r\n  for (var name in rules) {\r\n    if (hasOwn.call(rules, name)) {\r\n      setRule.call(this, name, rules[name]);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @return {Boolean} pass or not\r\n */\r\nvprtt.check = function(obj) {\r\n  var pass = true;\r\n  var validations = this.vs;\r\n  for (var i = 0; i < validations.length; ++i) {\r\n    var $fields = validations[i].$fs;\r\n    var rules = validations[i].rs;\r\n    for (var j = 0; j < rules.length; ++j) {\r\n      var rule = rules[j];\r\n      // 现在开始解析后缀表达式\r\n      pass = calculateRules.call(this, rule.queue, $fields, false);\r\n      if (!pass) {\r\n        var context = $fields.length < 2 ? $fields[0] : $fields;\r\n        rule.fail.call(context, obj);\r\n        break;\r\n      }\r\n    }\r\n    if (!pass) break;\r\n  }\r\n  return pass;\r\n};\r\n\r\n/**\r\n * @method .remove(rules)\r\n * 移除自定义规则\r\n * @param {Array|String} rules\r\n * @return this\r\n */\r\nvprtt.remove = function(rules) {\r\n  function removeRule(rule) {\r\n    if (typeof this.cs[rule] !== TYPE_UNDEFINED) {\r\n      delete this.cs[rule];\r\n    }\r\n  }\r\n  if (isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      removeRule.call(this, rules[i]);\r\n    }\r\n  } else {\r\n    removeRule.call(this, rules);\r\n  }\r\n  return this;\r\n};\r\n\n// checker函数的第一个参数总是一个数组，这个数组就是待检测的字符串数组\r\n// 从第二个参数起，每个checker函数带有不同长度的参数列表。例如，empty函数的参数列表长度为0，long函数的参数列表长度为2（暂时，有待改进）\r\nvar defaultCheckers = {};\r\n\r\nvar defaultMatchers = {\r\n  ////////// 正则匹配\r\n  url: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/\r\n  , email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i\r\n  , number: /^(0|([\\+\\-]?[1-9]\\d*))(\\.[0-9]+)?$/\r\n  , int: /^(0|([\\+\\-]?[1-9]\\d*))$/\r\n  // 正整数\r\n  , positive: /^\\+?[1-9]\\d*$/\r\n  // 负整数\r\n  , negative: /^\\-[1-9]\\d*$/\r\n  // 变量名：只能包含英文字母/数字/下划线，且不能以数字开头\r\n  , varName: /^[a-zA-Z_][a-zA-Z0-9_]*$/\r\n  // 昵称：只能包含中文/英文字母/数字/下划线，且不能以数字开头\r\n  , nickName: /^[\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z_][\\u4E00-\\u9FA5\\uF900-\\uFA2Da-zA-Z0-9_]*$/\r\n  // QQ\r\n  , QQ: /^[1-9][0-9]{4,}$/\r\n  // 身份证号\r\n  // 手机号\r\n  // 电话号码\r\n  // 邮政编码\r\n  // IP\r\n  // IPV4\r\n  // IPV6\r\n  // 全大写\r\n  , upperCase: /^[A-Z]+$/g\r\n  // 全小写\r\n  , lowerCase: /^[a-z]$/g\r\n  ////////// 非正则匹配\r\n  // 空限制\r\n  , empty: empty\r\n  // 相等\r\n  , equal: equal\r\n  // 长度范围限制\r\n  , long: long\r\n  // 数值大小限制\r\n  , range: range\r\n};\r\n\r\n/**\r\n * 判断值是否为空\r\n * @param {Object} value\r\n * 如果value为null|undefined|空字符串，就判断为真，否则判断为假\r\n * @return {Boolean} 是否为空\r\n */\r\nfunction isEmpty(value) {\r\n  return value === null || typeof value === TYPE_UNDEFINED || value === '';\r\n}\r\n\r\n/**\r\n * defaults.checkers: equal check\r\n * @param {Array} values\r\n * @return {Boolean} equal or not\r\n */\r\nfunction equal(values) {\r\n  var equal = true;\r\n  for (var i = 0; i < values.length - 1; ++i) {\r\n    if (values[i] !== values[i+1]) {\r\n      equal = false;\r\n      break;\r\n    }\r\n  }\r\n  return equal;\r\n}\r\n\r\n/**\r\n * defaults.checkers: empty check\r\n * @param {Array} values\r\n * @return {Boolean} yes or no\r\n */\r\nfunction empty(values) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    if (!isEmpty(values[i])) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\r\n/**\r\n * defaults.checkers: length check\r\n * @param {Array} values\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @return {Boolean} yes or no\r\n */\r\nfunction long(values, min, max) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var length = values[i].length;\r\n    if (length < min || length > max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\r\n/**\r\n * defaults.check: number range check\r\n * 这个函数和long类似，但是不是用来限制长度的，而是用来限制数值本身的\r\n * @param {Array} values\r\n * @param {Boolean} leftEqual 是否大于等于\r\n * @param {Number} min\r\n * @param {Number} max\r\n * @param {Boolean} rightEqual 是否小于等于\r\n * @return {Boolean} yes or no\r\n */\r\nfunction range(values, leftEqual, min, max, rightEqual) {\r\n  var pass = true;\r\n  for (var i = 0; i < values.length; ++i) {\r\n    var value = values[i];\r\n    if (leftEqual && value < min || rightEqual && value > max || !leftEqual && value <= min || !rightEqual && value >= max) {\r\n      pass = false;\r\n      break;\r\n    }\r\n  }\r\n  return pass;\r\n}\r\n\nvar apiCheckers = {};\r\n\r\n/**\r\n * @static Validator.is\r\n * 优先级： api.checkers > defaults.checkers\r\n * @param {String} ruleName\r\n * @param {String} value\r\n * @return {Boolean} is or not\r\n */\r\nvar is = Validator.is = function(ruleName, value) {\r\n  var checker = apiCheckers[ruleName] || defaultCheckers[ruleName];\r\n  var result;\r\n  switch(getType(checker)) {\r\n    case TYPE_ARRAY:\r\n      result = calculateRules.call(this, checker, value, true);\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      result = checker(value);\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker for ' + ruleName + ' is not defined.');\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * @static Validator.not\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar not = Validator.not = function(ruleName, value) {\r\n  return !is(ruleName, value);\r\n};\r\n\r\n/**\r\n * This helper helps to regist default checkers, `is` api and `not` api\r\n * 所有的defaultCheckers都是函数\r\n * @param {String} name\r\n * @param {Object} matcher\r\n */\r\nfunction registDefaultCheckers(name, matcher) {\r\n  var callback;\r\n  switch(getType(matcher)) {\r\n    case TYPE_REGEXP:\r\n      callback = function(value) {\r\n        return matcher.test(value);\r\n      };\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      callback = matcher;\r\n      break;\r\n    default:\r\n      throw new TypeError('Matcher Type Error.');\r\n  }\r\n  defaultCheckers[name] = callback;\r\n  is[name] = callback;\r\n  not[name] = function() {\r\n    return !callback.apply(null, arguments);\r\n  };\r\n}\r\n\r\nfor (var m in defaultMatchers) {\r\n  if (hasOwn.call(defaultMatchers, m)) {\r\n    registDefaultCheckers(m, defaultMatchers[m]);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {String} type\r\n * @param {String|RegExp|Function} checker\r\n * checker可以是字符串，正则表达式，或者函数\r\n * 当checker是字符串时，表示基于内建规则组合（表达式）的新规则\r\n * 当checker是正则表达式时，表示一条规则，它必须通过该正则表达式的完全匹配\r\n * 当checker是函数时，该函数的返回值必须是布尔型\r\n * This function may throw a `TypeError` if checker's type is not support.\r\n */\r\nfunction registApiChecker(type, checker) {\r\n  var callback;\r\n  switch(getType(checker)) {\r\n    case TYPE_STRING:\r\n      // TODO: 解析规则，生成的是一个后缀表达式（队列）\r\n      // 只能使用defaultCheckers，如果defaultCheckers里没有，就抛出异常\r\n      // 此处不直接生成checker函数，而是把表达式解析成后缀形式（队列存储），在验证的时候（执行.check()或者Validator.is()/Validator.not()时）再执行表达式运算\r\n      var queue;\r\n      try {\r\n        queue = parseRules(checker);\r\n      } catch(err) {\r\n        throw new Error(err);\r\n      }\r\n      callback = queue;\r\n      break;\r\n    case TYPE_REGEXP:\r\n      callback = function(value) {\r\n        return checker.test(value);\r\n      }\r\n      break;\r\n    case TYPE_FUNCTION:\r\n      callback = checker;\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker must be a String/RegExp/Function.');\r\n  }\r\n  apiCheckers[type] = callback;\r\n}\r\n\r\n/**\r\n * @static Validator.api(rules)\r\n * @param {Object} rules\r\n * @return Validator\r\n */\r\nValidator.api = function(rules) {\r\n\r\n  for (var name in rules) {\r\n    if (hasOwn.call(rules, name)) {\r\n      registApiChecker.call(this, name, rules[name]);\r\n    }\r\n  }\r\n  return this;\r\n\r\n};\r\n\r\n// just for test\r\nValidator.api.list = function() {\r\n  console.log(apiCheckers);\r\n};\r\n\n// 暂时不做扩展：没有必要做扩展了，已经够用了\n\n/**\r\n * @constructor\r\n * @class FormValidator\r\n * @extends Validator\r\n * @param {HTMLElement|String} formOrSelector\r\n * @param {Object|Array} validations\r\n * TODO: 增加对checkbox,radio的支持\r\n */\r\nvar FormValidator = function(formOrSelector, validations) {\r\n  this.vs = [];\r\n  this.cs = {};\r\n  if (typeof formOrSelector === 'string') {\r\n    this.$form = document.querySelectorAll(formOrSelector)[0]; // TODO: querySelectorAll兼容性\r\n  } else {\r\n    this.$form = formOrSelector;\r\n  }\r\n  validations = validations || [];\r\n  if (!isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $fields = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      var $field = this.$form.querySelectorAll('[name=' + fields[j] + ']')[0] || this.$form.querySelectorAll('[data-name=' + fields[j] + ']')[0]; // TODO: querySelectorAll兼容性\r\n      if (typeof $field === TYPE_UNDEFINED) {\r\n        throw new TypeError('未找到域：' + fields[j]);\r\n      }\r\n      $fields.push($field);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = isArray(rules) ? rules : [rules];\r\n    for (var k = 0; k < rules.length; ++k) {\r\n      rules[k].queue = parseRules(rules[k].type);\r\n    }\r\n    this.vs.push({\r\n      $fs: $fields,\r\n      rs: rules\r\n    });\r\n  }\r\n};\r\n\r\nFormValidator.prototype = new Validator();\r\nFormValidator.prototype.constructor = FormValidator;\r\n\r\n/**\r\n * @method .check()\r\n * @override Validator.prototype.check()\r\n * @return {Boolean} pass or not\r\n */\r\nFormValidator.prototype.check = function() {\r\n  return Validator.prototype.check.call(this, this.$form);\r\n};\r\n\n\r\nexports.Validator = Validator;\r\n\r\nexports.FormValidator = FormValidator;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}