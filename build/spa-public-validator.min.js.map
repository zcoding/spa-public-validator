{"version":3,"sources":["spa-public-validator.js"],"names":["factory","define","cmd","require","exports","module","window","isEmpty","value","registAPI","name","callback","is","console","warn","not","objectType","Object","prototype","toString","utils","isArray","obj","type","TYPE_ARRAY","isFunction","TYPE_FUNCTION","getValue","htmlElement","getAttribute","getLengthParams","paramString","matcher","result","match","TypeError","min","max","Infinite","call","TYPE_STRING","TYPE_REGEXP","Validator","validations","this","checkers","vprtt","add","rules","setRule","rule","values","pass","i","len","length","test","check","remove","removeRule","FormValidator","formOrSelector","$form","document","querySelectorAll","fields","field","$field","j","push","constructor","getChecker","parts","split","replace","checker","defaults","params","_params","slice","k","unshift","apply","context","fail","notEmpty","ruleName","testString","api","apiName","_type","_checker","list"],"mappings":"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","file":"spa-public-validator.min.js","sourcesContent":["(function(factory) {\r\n  if (typeof define === 'function' && define.cmd) {\r\n    define(function(require, exports, module) {\r\n      factory(exports);\r\n    });\r\n  } else {\r\n    factory(window)\r\n  }\r\n}(function(exports) {\r\n\nvar objectType = Object.prototype.toString;\r\n\r\nvar hasOwn = function(p) {\r\n  return this.hasOwnProperty(p);\r\n};\r\n\r\nvar utils = {};\r\n\r\nutils.isArray = function(obj) {\r\n  return utils.type(obj) === utils.TYPE_ARRAY;\r\n};\r\n\r\nutils.isFunction = function(obj) {\r\n  return utils.type(obj) === utils.TYPE_FUNCTION;\r\n};\r\n\r\nutils.getValue = function(htmlElement) {\r\n  if (typeof htmlElement.value === 'undefined') {\r\n    return htmlElement.getAttribute('data-value') || '';\r\n  } else {\r\n    return htmlElement.value;\r\n  }\r\n};\r\n\r\n/**\r\n * 解析length规则的参数\r\n * @param {String} paramString\r\n * @return {Array} params\r\n * HACK: 这里的解析可以更复杂，例如，加入对布尔运算的解析\r\n */\r\nutils.getLengthParams = function(paramString) {\r\n  paramString = paramString[0]; // 暂时只做最简单的解析\r\n  var matcher = /\\s*([\\(\\[])\\s*(\\d+)?\\s*,\\s*(\\d+)?\\s*([\\)\\]])\\s*/; // 如果没有最小限制，最小限制为0；如果没有最大限制，最大限制为Infinite\r\n  var result = paramString.match(matcher);\r\n  if (result === null) {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  var min = result[2], max = result[3];\r\n  if (typeof min === 'undefined') {\r\n    min = 0;\r\n  } else if (result[1] === '(') {\r\n    min = +min+1;\r\n  } else if (result[1] === '[') {\r\n    min = +min;\r\n  } else {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  if (typeof max === 'undefined') {\r\n    max = Infinite;\r\n  } else if (result[4] === ')') {\r\n    max = +max-1;\r\n  } else if (result[4] === ']'){\r\n    max = +max;\r\n  } else {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  if (min !== min || max !== max) {\r\n    throw new TypeError('The parameters for length is illegal.');\r\n  }\r\n  return [min, max];\r\n};\r\n\r\n/**\r\n * Utils: Get Object Type\r\n * @param {Object} obj\r\n * @return {String} object type\r\n */\r\nutils.type = function(obj) {\r\n  return objectType.call(obj);\r\n};\r\n\r\n// Object Type Const String\r\nutils.TYPE_STRING = '[object String]';\r\nutils.TYPE_ARRAY = '[object Array]';\r\nutils.TYPE_FUNCTION = '[object Function]';\r\nutils.TYPE_REGEXP = '[object RegExp]';\r\n\n/**\r\n * @constructor\r\n * @class Validator\r\n */\r\nvar Validator = function(validations) {\r\n  this.checkers = {};\r\n  this.validations = [];\r\n};\r\n\r\nvar vprtt = Validator.prototype;\r\n\r\n/**\r\n * @method .add(rules)\r\n * 添加自定义规则\r\n * 自定义的规则，可以和内建规则同名，但调用时只会使用内建规则。如果要覆盖内建规则，就使用Validator.api（全局覆盖）\r\n * HACK: 因为自定义规则是用数组存的，所以也可能重名\r\n * @param {Object} rules\r\n * @return this\r\n */\r\nvprtt.add = function(rules) {\r\n  function setRule(rule) {\r\n    switch (utils.type(rule.rule)) {\r\n      case utils.TYPE_FUNCTION:\r\n        this.checkers[rule.name] = rule.rule;\r\n        break;\r\n      case utils.TYPE_STRING:\r\n        this.checkers[rule.name] = function() {\r\n        };\r\n        break;\r\n      case utils.TYPE_REGEXP:\r\n        this.checkers[rule.name] = function(values) {\r\n          var pass = true;\r\n          if (utils.isArray(values)) {\r\n            for (var i = 0, len = values.length; i < len; ++i) {\r\n              if (!rule.rule.test(values[i])) {\r\n                pass = false;\r\n                break;\r\n              }\r\n            }\r\n          } else {\r\n            if (!rule.rule.test(values)) {\r\n              pass = false;\r\n            }\r\n          }\r\n          return pass;\r\n        };\r\n        break;\r\n      default:\r\n        throw new TypeError('Rule type not support.');\r\n    }\r\n  }\r\n  if (utils.isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      setRule.call(this, rules[i]);\r\n    }\r\n  } else {\r\n    setRule.call(this, rules);\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @return {Boolean} pass or not\r\n */\r\nvprtt.check = function() {};\r\n\r\n/**\r\n * @method .remove(rules)\r\n * 移除自定义规则\r\n * @param {Array|String} rules\r\n * @return this\r\n */\r\nvprtt.remove = function(rules) {\r\n  function removeRule(rule) {\r\n    if (typeof this.checkers[rule] !== 'undefined') {\r\n      delete this.checkers[rule];\r\n    }\r\n  }\r\n  if (utils.isArray(rules)) {\r\n    for (var i = 0, len = rules.length; i < len; ++i) {\r\n      removeRule(rules[i]);\r\n    }\r\n  } else {\r\n    removeRule(rules);\r\n  }\r\n  return this;\r\n};\r\n\n/**\r\n * @constructor\r\n * @class FormValidator\r\n * @extends Validator\r\n * @param {HTMLElement|String} formOrSelector\r\n * @param {Object|Array} validations\r\n */\r\nvar FormValidator = function(formOrSelector, validations) {\r\n  if (typeof formOrSelector === 'string') {\r\n    this.$form = document.querySelectorAll(formOrSelector)[0];\r\n  } else {\r\n    this.$form = formOrSelector;\r\n  }\r\n  this.validations = [];\r\n  if (!utils.isArray(validations)) {\r\n    validations = [validations];\r\n  }\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var fields = validations[i].field;\r\n    if (!utils.isArray(fields)) {\r\n      fields = [fields];\r\n    }\r\n    var $field = [];\r\n    for (var j = 0; j < fields.length; ++j) {\r\n      $field.push(this.$form.querySelectorAll('[name=' + fields[j] + ']')[0]);\r\n    }\r\n    var rules = validations[i].rules;\r\n    rules = utils.isArray(rules) ? rules : [rules];\r\n    this.validations.push({\r\n      $field: $field,\r\n      rules: rules\r\n    });\r\n  }\r\n}\r\n\r\nFormValidator.prototype = new Validator();\r\nFormValidator.prototype.constructor = FormValidator;\r\n\r\n/**\r\n * getChecker\r\n * @param {String} type\r\n * @return {Array} [checkerFunction, params]\r\n */\r\ngetChecker = function(type) {\r\n  var parts = type.split(':');\r\n  type = parts[0].replace(/length/i, 'long');\r\n  var checker = defaults.checkers[type] || this.checkers[type];\r\n  if (!utils.isFunction(checker)) {\r\n    throw new TypeError('Checker for rule ' + parts[0] + ' must be a Function.');\r\n  }\r\n  var params;\r\n  var _params = parts.slice(1);\r\n  switch (type) {\r\n    case 'long':\r\n      params = utils.getLengthParams(_params);\r\n      break;\r\n    default:\r\n      params = _params;\r\n  }\r\n  return [checker, params];\r\n};\r\n\r\n/**\r\n * @method .check()\r\n * @override Validator.prototype.check()\r\n * @return {Boolean} pass or not\r\n */\r\nFormValidator.prototype.check = function() {\r\n  var $form = this.$form;\r\n  var validations = this.validations;\r\n  var pass = true;\r\n  for (var i = 0, len = validations.length; i < len; ++i) {\r\n    var $field = validations[i].$field;\r\n    var rules = validations[i].rules;\r\n    for (var j = 0; j < rules.length; ++j) {\r\n      var rule = rules[j];\r\n      var checker = getChecker.call(this, rule.type);\r\n      var values  = [];\r\n      for (var k = 0; k < $field.length; ++k) {\r\n        values.push(utils.getValue($field[k]));\r\n      }\r\n      checker[1].unshift(values);\r\n      if (!checker[0].apply(null, checker[1])) {\r\n        var context = $field.length < 2 ? $field[0] : $field;\r\n        rule.fail.call(context, $form);\r\n        pass = false;\r\n        break;\r\n      }\r\n    }\r\n    if (!pass) break;\r\n  }\r\n  return pass;\r\n};\r\n\nvar defaults = {};\n\nvar rules = defaults.rules = ['empty', 'long', 'email', 'url', 'yes']; // 内置规则\n\nvar matchers = {\n  ////////// 正则匹配\n  url: /^(https?:\\/\\/)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\/\\w \\.-]*)*\\/?$/,\n  email: /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\n  ////////// 非正则匹配\n  empty: isEmpty\n};\n\n/**\n * 判断值是否为空\n * @param {Object} value\n * 如果value为null|undefined|空字符串，就判断为真，否则判断为假\n * @return {Boolean} 是否为空\n */\nfunction isEmpty(value) {\n  return value === null || typeof value === 'undefined' || value === '';\n}\n\n// TODO: checker函数总是接收（唯一）一个字符串数组作为参数\nvar checkers = {};\n\n/**\n * checker: not empty\n * @param {Array} values\n * @return {Boolean} yes or no\n */\ncheckers.notEmpty = function(values) {\n  var pass = true;\n  for (var i = 0, len = values.length; i < len; ++i) {\n    if (isEmpty(values[i])) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n};\n\n/**\n * checker: length limit\n * @param {Array} values\n * @param {Number} min\n * @param {Number} max\n * @return {Boolean} yes or no\n */\ncheckers.long = function(values, min, max) {\n  var pass = true;\n  for (var i = 0, len = values.length; i < len; ++i) {\n    var length = values[i].length;\n    if (length < min || length > max) {\n      pass = false;\n      break;\n    }\n  }\n  return pass;\n};\n\ndefaults.checkers = checkers;\n\n/**\r\n * @static Validator.is\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n * HACK: is是一个函数对象，注意属性不能被覆盖\r\n */\r\nvar is = function(ruleName, testString) {\r\n  return is[ruleName](testString);\r\n};\r\n\r\n/**\r\n * @static Validator.not\r\n * @param {String} ruleName\r\n * @param {String} testString\r\n * @return {Boolean} is or not\r\n */\r\nvar not = function(ruleName, testString) {\r\n  return not[ruleName](testString);\r\n};\r\n\r\nValidator.is = is;\r\n\r\nValidator.not = not;\r\n\r\n/**\r\n * This helper helps to regist api\r\n * @param {String} name\r\n * @param {Function} callback\r\n */\r\nfunction registAPI(name, callback) {\r\n  if (typeof is[name] !== 'undefined') {\r\n    console.warn('Warning: current api \"' + name + '\" will be overridden.');\r\n  }\r\n  is[name] = callback;\r\n  not[name] = function(value) {\r\n    return !is[name](value);\r\n  };\r\n}\r\n\r\nValidator.not = not;\r\n\r\n// 注册内建规则\r\nfor (var i = 0, len = defaults.rules.length; i < len; ++i) {\r\n  registAPI(defaults.rules[i], defaults.checkers[defaults.rules[i]]);\r\n}\r\n\r\n/**\r\n * @static Validator.api(type, apiName, checker)\r\n * @param {String} type\r\n * @param {String} apiName\r\n * @param {String|RegExp|Function} checker\r\n * checker可以是字符串，正则表达式，或者函数\r\n * 当checker是字符串时，表示基于内建的规则添加的新规则（其实完全可以用内建规则实现）\r\n * 当checker是正则表达式时，表示一条通过该正则表达式测试的规则\r\n * 当checker是函数时，该函数的返回值必须是布尔\r\n * This function may throw a `TypeError` if checker's type is not support.\r\n * @return Validator\r\n */\r\nValidator.api = function(type, apiName, checker) {\r\n  var _type = utils.type(checker);\r\n  if (!/is|not/.test(type)) {\r\n    throw new TypeError('The api type \"' + type + '\" is not support.');\r\n  }\r\n  var is = type === 'is';\r\n  var callback;\r\n  switch(_type) {\r\n    case utils.TYPE_STRING:\r\n      var parts = checker.split(':');\r\n      var _checker = defaults.checkers[parts[0]];\r\n      if (typeof _checker === 'undefined') {\r\n        throw new TypeError('Checker ' + parts[0] + ' is not defined.');\r\n      }\r\n      callback = function(value) {\r\n        var result = _checker.call(this, parts.slice(1));\r\n        return is ?  result: !result;\r\n      };\r\n      break;\r\n    case utils.TYPE_REGEXP:\r\n      callback = function(value) {\r\n        var result = checker.test(value);\r\n        return is ? result : !result;\r\n      }\r\n      break;\r\n    case utils.TYPE_FUNCTION:\r\n      callback = checker;\r\n      break;\r\n    default:\r\n      throw new TypeError('Checker must be a String/RegExp/Function.');\r\n  }\r\n  registAPI(apiName, callback);\r\n  return Validator;\r\n};\r\n\r\n/**\r\n * list all registed api\r\n */\r\nValidator.api.list = function() {\r\n  return rules;\r\n};\r\n\n\r\nexports.Validator = Validator;\r\n\r\nexports.FormValidator = FormValidator;\r\n\r\n}));\r\n"],"sourceRoot":"/source/"}